{"version":3,"sources":["Assets/expand_less-24px.svg","Assets/expand_more-24px.svg","Assets/play_arrow-24px.svg","Assets/pause-24px.svg","Assets/restore-24px.svg","Pomodoro.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","StyledContainer","styled","div","props","direction","height","StyledText","p","size","padding","StyledImg","img","disabled","Counter","type","length","handleChange","clockRunning","onClick","src","ArrowUp","alt","ArrowDown","Pomodoro","handleReset","console","log","clearInterval","timer","seconds","setState","initialState","handleRun","state","time_left","clock_running","setInterval","current_type","seconds_left","bind","change_type","this","session_length","break_length","prevProps","prevState","snapshot","Pause","Play","Reset","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.6f6546b8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/expand_less-24px.47f91d3c.svg\";","module.exports = __webpack_public_path__ + \"static/media/expand_more-24px.95a46151.svg\";","module.exports = __webpack_public_path__ + \"static/media/play_arrow-24px.f5408bdf.svg\";","module.exports = __webpack_public_path__ + \"static/media/pause-24px.0d842eeb.svg\";","module.exports = __webpack_public_path__ + \"static/media/restore-24px.0ebb9c89.svg\";","import React from \"react\"\nimport styled from 'styled-components'\nimport ArrowUp from './Assets/expand_less-24px.svg'\nimport ArrowDown from './Assets/expand_more-24px.svg'\nimport Play from './Assets/play_arrow-24px.svg'\nimport Pause from './Assets/pause-24px.svg'\nimport Reset from './Assets/restore-24px.svg'\n\n\nconst StyledContainer = styled.div`\n    display: flex;\n    flex-direction: ${props => props.direction ?? 'row'};\n    align-items: center;\n    justify-content: center;\n    width: auto;\n    height: ${props => props.height ?? 'auto'};\n`\nconst StyledText = styled.p`\n    font-size: ${props => props.size ?? '24px'};\n    font-weight: bold;\n    padding: ${props => props.padding ?? '0'}\n`\n\nconst StyledImg = styled.img`\n    height: ${props => props.size ?? '24px'};\n    cursor: pointer;\n    pointer-events: ${props => props.disabled ? 'none' : 'auto'}\n`\n\nconst Counter = (props) => {\n    const {type, length, handleChange, clockRunning} = props\n    return (\n        <StyledContainer direction={'column'}>\n            <StyledText size={'36px'} padding={'10px'}>{type} Length</StyledText>\n            <StyledContainer>\n                <StyledText padding={'4px'}>{length}</StyledText>\n                <StyledContainer direction={'column'}>\n                    <StyledImg disabled={clockRunning} onClick={() => handleChange(type, 'increase')} src={ArrowUp} alt='' />\n                    <StyledImg disabled={clockRunning} onClick={() => handleChange(type, 'decrease')} src={ArrowDown} alt='' />\n                </StyledContainer>\n            </StyledContainer>\n        </StyledContainer>\n    )\n}\n\nclass Pomodoro extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = this.initialState;\n\n        this.handleChange = this.handleChange.bind(this);\n    }\n\n    get initialState() {\n        return {\n            session_length: 25,\n            break_length: 5,\n            time_left: 24,\n            seconds_left: 59,\n            clock_running: false,\n            current_type: 'Session',\n        }\n    }\n\n    componentDidMount() {\n        // no need\n        // this.setState({\n        //     time_left: this.state.session_length\n        // })\n    }\n\n    handleChange(current_type, change_type) {\n        if (current_type === 'Session' && this.state.session_length >= 1) {\n            this.setState({\n                session_length: this.state.session_length + (change_type==='increase' ?  1 : -1),\n            })\n        }\n\n        if (current_type === 'Break' && this.state.break_length >= 1) {\n            this.setState({\n                break_length: this.state.break_length + (change_type==='increase' ?  1 : -1),\n            })\n        }\n    }\n\n    handleReset = () => {\n        console.log('reset')\n        clearInterval(this.timer)\n        clearInterval(this.seconds)\n        this.setState(this.initialState)\n    }\n\n    handleRun = () => {\n        console.log('time left:', this.state.time_left)\n\n        if (this.state.clock_running === false) {\n            this.timer = setInterval(() => {\n                if (this.state.time_left === 0) {\n                    if (this.state.current_type === 'Session') {\n                        this.setState({\n                            current_type: 'Break'\n                        })\n                    } else {\n                        this.handleReset()\n                    }\n                }\n\n                console.log(\"clock\", this.state.time_left)\n                this.setState({\n                    time_left: this.state.time_left - 1\n                })\n            }, 6000)\n\n            this.seconds = setInterval(() => {\n                this.setState({\n                    seconds_left: this.state.seconds_left - 1\n                })\n            }, 100)\n        } else {\n            clearInterval(this.timer)\n            clearInterval(this.seconds)\n        }\n\n        this.setState({\n            clock_running: !this.state.clock_running\n        })\n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        if (prevState.session_length !== this.state.session_length) {\n            if (this.state.session_length < 1) {\n                this.setState({\n                    session_length: 1,\n                    time_left: 0,\n                })\n            }\n        }\n\n        if (prevState.break_length !== this.state.break_length) {\n            if (this.state.break_length < 1) {\n                this.setState({\n                    break_length: 1,\n                    time_left: 0,\n                    clock_running: false,\n                })\n            }\n        }\n\n        if (prevState.current_type !== this.state.current_type ||\n            prevState.session_length !== this.state.session_length ||\n            prevState.break_length !== this.state.break_length) {\n            this.setState({\n                time_left: this.state.current_type === 'Session' ? this.state.session_length-1 : this.state.break_length,\n            })\n        }\n\n        if (prevState.time_left !== this.state.time_left) {\n            this.setState({\n                seconds_left: 59\n            })\n        }\n    }\n\n    render() {\n        return (\n            <StyledContainer direction={'column'} height={'100%'}>\n                <StyledText size={'42px'}>Pomodoro Clock</StyledText>\n                <StyledContainer height={'100px'}>\n                    <Counter handleChange={this.handleChange} clockRunning={this.state.clock_running} type={'Break'} length={this.state.break_length} />\n                    <Counter  handleChange={this.handleChange} clockRunning={this.state.clock_running} type={'Session'} length={this.state.session_length} />\n                </StyledContainer>\n                <StyledContainer direction={'column'}>\n                    <StyledText size={'36px'}>{this.state.current_type}</StyledText>\n                    <StyledText size={'48px'}>{this.state.time_left}:{this.state.seconds_left}</StyledText>\n                </StyledContainer>\n                <StyledContainer>\n                    <StyledImg size={'40px'} src={this.state.clock_running ? Pause : Play} onClick={this.handleRun} alt='' />\n                    <StyledImg size={'40px'} src={Reset} onClick={this.handleReset} alt='' />\n                </StyledContainer>\n            </StyledContainer>\n        )\n    }\n}\n\nexport default  Pomodoro","import React from 'react';\nimport Pomodoro from \"./Pomodoro\";\nimport './App.css';\n\nfunction App() {\n  return (\n    <Pomodoro />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}